<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.0.61
 Built on: 29/08/2017
*/

namespace SuperSQL;

// lib/connector.php
class Response implements \ArrayAccess,\Iterator{public$result;public$affected;public$ind=0;public$error;public$errorData;public$outTypes;public$complete=false;public$stmt;function __construct($a,$b,&$c,$d){$this->error=!$b;if(!$b){$this->errorData=$a->errorInfo();}else{$this->outTypes=$c;$this->init($a,$d);$this->affected=$a->rowCount();}}private function init(&$a,&$d){if($d===0){$c=$this->outTypes;$e=$a->fetchAll(\PDO::FETCH_ASSOC);if($c){foreach($e as$f=>&$g){$this->map($g,$c);}}$this->result=$e;$this->complete=true;}else if($d===1){$this->stmt=$a;$this->result=array();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$g=$this->stmt->fetch(\PDO::FETCH_ASSOC);if($g){if($this->outTypes){$this->map($g,$this->outTypes);}array_push($this->result,$g);return$g;}else{$this->complete=true;$this->stmt->closeCursor();$this->stmt=null;return false;}}private function fetchAll(){while($this->fetchNextRow()){}}function map(&$g,&$c){foreach($c as$h=>$i){if(isset($g[$h])){switch($i){case 'int':$g[$h]=(int)$g[$h];break;case 'string':$g[$h]=(string)$g[$h];break;case 'bool':$g[$h]=$g[$h]? true : false;break;case 'json':$g[$h]=json_decode($g[$h]);break;case 'obj':$g[$h]=unserialize($g[$h]);break;}}}}function error(){return$this->error ?$this->errorData : false;}function getData($j=false){if(!$this->complete&&!$j)$this->fetchAll();return$this->result;}function getAffected(){return$this->affected;}function countRows(){return count($this->result);}function offsetSet($k,$l){}function offsetExists($k){return$this->offsetGet($k)===null ? false : true;}function offsetUnset($k){}function offsetGet($k){if(is_int($k)){if(isset($this->result[$k])){return$this->result[$k];}else if(!$this->complete){while($this->fetchNextRow()){if(isset($this->result[$k]))return$this->result[$k];}}}return null;}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$g=$this->fetchNextRow();$this->ind++;return$g;}else{return false;}}function rewind(){$this->ind=0;}function current(){return$this->result[$this->ind];}function key(){return$this->ind;}function valid(){return$this->offsetExists($this->ind);}}class Connector{public$db;public$log=array();public$dev=false;function __construct($m,$n,$o){$this->db=new \PDO($m,$n,$o);$this->log=array();}function query($p,$q=null,$c=null,$d=0){$r=$this->db->prepare($p);if($q)$s=$r->execute($q);else$s=$r->execute();if($this->dev)array_push($this->log,array($p,$q));if($d!==3){return new Response($r,$s,$c,$d);}else{return$r;}}function _query(&$t,$u,&$v,&$c=null,$d=0){$r=$this->db->prepare($t);if($this->dev)array_push($this->log,array($t,$u,$v));foreach($u as$w=>&$x){$r->bindParam($w+1,$x[0],$x[1]);}$s=$r->execute();if(!isset($v[0])){return new Response($r,$s,$c,$d);}else{$y=array();array_push($y,new Response($r,$s,$c,0));foreach($v as$w=>$l){foreach($l as$z=>&$aa){$u[$z][0]=$aa;}$s=$r->execute();array_push($y,new Response($r,$s,$c,0));}return$y;}}function close(){$this->db=null;$this->queries=null;}}
// lib/parser.php
class Parser{static function getArg(&$a){preg_match('/^(?:\[(?<a>.{2})\])(?<out>.*)/',$a,$b);if(isset($b["a"])){$a=$b["out"];return$b["a"];}else{return false;}}static function append(&$c,$d,$e,$f){if(is_array($d)&&$f[$e][2]<5){$g=count($d);for($h=1;$h<$g;$h++){if(!isset($c[$h-1]))$c[$h-1]=array();$c[$h-1][$e]=$d[$h];}}}static function escape($d){if(is_int($d)){return(int)$d;}else{return '\''.$d.'\'';}}static function append2(&$i,$j,$k,$f){function stripArgs(&$l){preg_match('/(?:\[.{2}\]){0,2}([^\[]*)/',$l,$m);return$m[1];}function escape($d,$k){if(!isset($k[2]))return$d;switch($k[2]){case 0: return$d ? '1' : '0';break;case 1: return(int)$d;break;case 2: return(string)$d;break;case 3: return$d;break;case 4: return null;break;case 5: return json_encode($d);break;case 6: return serialize($d);break;}}function recurse(&$n,$d,$j,$o,$f){foreach($d as$h=>&$p){if($h[0]==="#")continue;stripArgs($h);$q=$h.'#'.$o;if(isset($j[$q]))$r=$j[$q];else$r=$j[$h];$s=is_array($p)&&(!isset($f[$r][2])||$f[$r][2]<5);if($s){if(isset($p[0])){foreach($p as$t=>&$u){$v=$r+$t;if(isset($n[$v]))trigger_error('Key collision: '.$h,E_USER_WARNING);$n[$v]=escape($u,$f[$v]);}}else{recurse($n,$p,$j,$o.'/'.$h,$f);}}else{if(isset($n[$r]))trigger_error('Key collision: '.$h,E_USER_WARNING);$n[$r]=escape($p,$f[$r]);}}}$g=count($k);for($l=1;$l<$g;$l++){$d=$k[$l];if(!isset($i[$l-1]))$i[$l-1]=array();recurse($i[$l-1],$d,$j,'',$f);}}static function quote($a){preg_match('/([^.]*)\.?(.*)?/',$a,$m);if($m[2]!==''){return '`'.$m[1].'.'.$m[2].'`';}else{return '`'.$m[1].'`';}}static function quoteArray(&$w){foreach($w as&$p){$p=self::quote($p);}}static function table($x){if(is_array($x)){$y='';foreach($x as$t=>&$d){$z=self::getType($d);if($t!==0)$y.=', ';$y.='`'.$d.'`';if($z)$y.=' AS `'.$z.'`';}return$y;}else{return '`'.$x.'`';}}static function value($aa,$ba){$ca=$aa ?$aa : gettype($ba);$aa=\PDO::PARAM_STR;$da=2;if($ca==='integer'||$ca==='int'||$ca==='double'||$ca==='doub'){$aa=\PDO::PARAM_INT;$da=1;$ba=(int)$ba;}else if($ca==='string'||$ca==='str'){$ba=(string)$ba;$da=2;}else if($ca==='boolean'||$ca==='bool'){$aa=\PDO::PARAM_BOOL;$ba=$ba ? '1' : '0';$da=0;}else if($ca==='null'||$ca==='NULL'){$da=4;$aa=\PDO::PARAM_NULL;$ba=null;}else if($ca==='resource'||$ca==='lob'){$aa=\PDO::PARAM_LOB;$da=3;}else if($ca==='json'){$da=5;$ba=json_encode($ba);}else if($ca==='obj'||$ca==='object'){$da=6;$ba=serialize($ba);}else{$ba=(string)$ba;trigger_error('Invalid type '.$ca.' Assumed STRING',E_USER_WARNING);}return array($ba,$aa,$da);}static function getType(&$a){if(isset($a[1])&&$a[strlen($a)-1]===']'){$ea=strrpos($a,'[');if($ea===false){return '';}$fa=substr($a,$ea+1,-1);$a=substr($a,0,$ea);return$fa;}else return '';}static function rmComments($a){preg_match('/([^#]*)/',$a,$m);return$m[1];}static function conditions($k,&$f=false,&$ga=false,&$e=0){$ha=function(&$ha,$k,&$ga,&$e,&$f,$ia=' AND ',$ja=' = ',$ka=''){$la=0;$y='';foreach($k as$l=>&$d){if($l[0]==='#'){$ma=true;$l=substr($l,1);}else{$ma=false;}preg_match('/^(?:\[(?<a>.{2})\])(?:\[(?<b>.{2})\])?(?<out>.*)/',$l,$m);if(isset($m["a"])){$na=$m["a"];$l=$m["out"];$oa=isset($m["b"])?$m["b"]: false;}else{$na=false;}$pa=!isset($d[0]);$qa=$ia;$ra=$ja;$aa=$ma ? false : self::getType($l);$w=is_array($d)&&$aa!=='json'&&$aa!=='obj';if($na&&($na==='||'||$na==='&&')){$qa=($na==='||')? ' OR ' : ' AND ';$na=$oa;if($w&&$na&&($na==='||'||$na==='&&')){$ia=$qa;$qa=($na==='||')? ' OR ' : ' AND ';$na=self::getArg($l);}}$sa=false;if($na&&$na!=="=="){switch($na){case '!=':$ra=' != ';break;case '>>':$ra=' > ';break;case '<<':$ra=' < ';break;case '>=':$ra=' >= ';break;case '<=':$ra=' <= ';break;case '~~':$ra=' LIKE ';break;case '!~':$ra=' NOT LIKE ';break;default: if($na!=='><'&&$na!=='<>')throw new \Exception("Invalid operator ".$na." Available: ==,!=,>>,<<,>=,<=,~~,!~,<>,><");else$sa=true;break;}}else{if(!$pa||$na==='==')$ra=' = ';}if(!$w)$ia=$qa;if($la!==0)$y.=$ia;$ta=self::rmComments($l);if(!$ma)$ta=self::quote($ta);if($w){$y.='(';if($pa){$y.=$ha($ha,$d,$ga,$e,$f,$qa,$ra,$ka.'/'.$l);}else{if($ga!==false&&!$ma){$ga[$l]=$e;$ga[$l.'#'.$ka]=$e++;}if($sa){$e+=2;$y.=$ta.($na==='<>' ? 'NOT' : '').' BETWEEN ';if($ma){$y.=$d[0].' AND '.$d[1];}else if($f!==false){$y.='? AND ?';array_push($f,self::value($aa,$d[0]));array_push($f,self::value($aa,$d[1]));}else{$y.=self::escape($d[0]).' AND '.self::escape($d[1]);}}else{foreach($d as$h=>&$p){if($h!==0)$y.=$qa;$e++;$y.=$ta.$ra;if($ma){$y.=$p;}else if($f!==false){$y.='?';array_push($f,self::value($aa,$p));}else{$y.=self::escape($p);}}}$y.=')';}}else{$y.=$ta.$ra;if($ma){$y.=$d;}else{if($f!==false){$y.='?';array_push($f,self::value($aa,$d));}else{$y.=self::escape($d);}if($ga!==false){$ga[$l]=$e;$ga[$l.'#'.$ka]=$e++;}}}$la++;}return$y;};return$ha($ha,$k,$ga,$e,$f);}static function JOIN($ia,&$y,&$f,&$t){foreach($ia as$l=>&$d){if($l[0]==='#'){$ma=true;$l=substr($l,1);}else{$ma=false;}$na=self::getArg($l);switch($na){case '<<':$y.=' RIGHT JOIN ';break;case '>>':$y.=' LEFT JOIN ';break;case '<>':$y.=' FULL JOIN ';break;case '>~':$y.=' LEFT OUTER JOIN ';break;default:$y.=' JOIN ';break;}$y.='`'.$l.'` ON ';if($ma){$y.=$d;}else{$y.=self::conditions($d,$f,$ua,$t);}}}static function columns($va,&$y,&$wa){$xa='';$ua=$va[0][0];if($ua==='D'||$ua==='I'){if($va[0]==='DISTINCT'){$ya=1;$y.='DISTINCT ';array_splice($va,0,1);}else if(substr($va[0],0,11)==='INSERT INTO'){$ya=1;$y=$va[0].' '.$y;array_splice($va,0,1);}else if(substr($va[0],0,4)==='INTO'){$ya=1;$xa=' '.$va[0].' ';array_splice($va,0,1);}}if(isset($va[0])){if($va[0]==='*'){array_splice($va,0,1);$y.='*';foreach($va as$t=>&$d){preg_match('/(?<column>[a-zA-Z0-9_\.]*)(?:\[(?<type>[^\]]*)\])?/',$d,$za);$wa[$za['column']]=$za['type'];}}else{foreach($va as$t=>&$d){preg_match('/(?<column>[a-zA-Z0-9_\.]*)(?:\[(?<alias>[^\]]*)\])?(?:\[(?<type>[^\]]*)\])?/',$d,$za);$d=$za["column"];$ab=false;if(isset($za["alias"])){$ab=$za["alias"];if(isset($za["type"])){$aa=$za["type"];}else{if($ab==="json"||$ab==="obj"||$ab==="int"||$ab==="string"||$ab==="bool"){$aa=$ab;$ab=false;}else$aa=false;}if($aa){if(!$wa)$wa=array();$wa[$ab ?$ab :$d]=$aa;}}if($t!=0){$y.=', ';}$y.=self::quote($d);if($ab)$y.=' AS `'.$ab.'`';}}}else$y.='*';$y.=$xa;}static function SELECT($x,$va,$bb,$ia,$cb){$y='SELECT ';$f=array();$i=array();$wa=null;$t=0;if(!isset($va[0])){$y.='*';}else{self::columns($va,$y,$wa);}$y.=' FROM '.self::table($x);if($ia){self::JOIN($ia,$y,$f,$t);}if(!empty($bb)){$y.=' WHERE ';if(isset($bb[0])){$e=array();$y.=self::conditions($bb[0],$f,$e,$t);self::append2($i,$e,$bb,$f);}else{$y.=self::conditions($bb,$f);}}if($cb){if(is_int($cb)){$y.=' LIMIT '.$cb;}else if(is_string($cb)){$y.=' '.$cb;}else if(is_array($cb)){if(isset($cb[0])){$y.=' LIMIT '.(int)$cb[0].' OFFSET '.(int)$cb[1];}else{if(isset($cb['GROUP'])){$y.=' GROUP BY ';if(is_string($cb['GROUP'])){$y.=self::quote($cb['GROUP']);}else{self::quoteArray($cb['GROUP']);$y.=implode(', ',$cb['GROUP']);}if(isset($cb['HAVING'])){$y.=' HAVING '.(is_string($cb['HAVING'])?$cb['HAVING']: self::conditions($cb['HAVING'],$f,$ua,$t));}}if(isset($cb['ORDER'])){$y.=' ORDER BY '.self::quote($cb['ORDER']);}if(isset($cb['LIMIT'])){$y.=' LIMIT '.(int)$cb['LIMIT'];}if(isset($cb['OFFSET'])){$y.=' OFFSET '.(int)$cb['OFFSET'];}}}}return array($y,$f,$i,$wa);}static function INSERT($x,$db){$y='INSERT INTO '.self::table($x).' (';$f=array();$i=array();$eb='';$t=0;$fb=0;$j=array();$gb=isset($db[0]);$k=$gb ?$db[0]:$db;foreach($k as$l=>&$d){if($l[0]==='#'){$ma=true;$l=substr($l,1);}else{$ma=false;}if($fb!==0){$y.=', ';$eb.=', ';}preg_match('/(?<out>[^\[]*)(?:\[(?<type>[^]]*)\])?/',$l,$m);$l=$m["out"];$y.='`'.$l.'`';if($ma){$eb.=$d;}else{$aa=isset($m["type"])?$m["type"]: false;$eb.='?';$hb=(!$aa||($aa!=='json'&&$aa!=='obj'))&&is_array($d);array_push($f,self::value($aa,$hb ?$d[0]:$d));if($gb){$j[$l]=$t++;}else if($hb){self::append($i,$d,$t++,$f);}}$fb++;}if($gb)self::append2($i,$j,$db,$f);$y.=') VALUES ('.$eb.')';return array($y,$f,$i);}static function UPDATE($x,$db,$bb){$y='UPDATE '.self::table($x).' SET ';$f=array();$i=array();$t=0;$fb=0;$j=array();$gb=isset($db[0]);$k=$gb ?$db[0]:$db;foreach($k as$l=>&$d){if($l[0]==='#'){$ma=true;$l=substr($l,1);}else{$ma=false;}if($fb!==0){$y.=', ';}if($ma){$y.='`'.$l.'` = '.$d;}else{preg_match('/(?:\[(?<arg>.{2})\])?(?<out>[^\[]*)(?:\[(?<type>[^\]]*)\])?/',$l,$m);$l=$m["out"];$y.='`'.$l.'` = ';if(isset($m["arg"])){switch($m["arg"]){case '+=':$y.='`'.$l.'` + ?';break;case '-=':$y.='`'.$l.'` - ?';break;case '/=':$y.='`'.$l.'` / ?';break;case '*=':$y.='`'.$l.'` * ?';break;default:$y.='?';break;}}$aa=isset($m["type"])?$m["type"]: false;$hb=(!$aa||($aa!=='json'&&$aa!=='obj'))&&is_array($d);array_push($f,self::value($aa,$hb ?$d[0]:$d));if($gb){$j[$l]=$t++;}else if($hb){self::append($i,$d,$t++,$f);}}$fb++;}if($gb)self::append2($i,$j,$db,$f);if(!empty($bb)){$y.=' WHERE ';$e=array();if(isset($bb[0])){$y.=self::conditions($bb[0],$f,$e,$t);self::append2($i,$e,$bb,$f);}else{$y.=self::conditions($bb,$f,$ua,$t);}}return array($y,$f,$i);}static function DELETE($x,$bb){$y='DELETE FROM '.self::table($x);$f=array();$i=array();if(!empty($bb)){$y.=' WHERE ';$e=array();if(isset($bb[0])){$y.=self::conditions($bb[0],$f,$e);self::append2($i,$e,$bb,$f);}else{$y.=self::conditions($bb,$f);}}return array($y,$f,$i);}}
// index.php
class SuperSQL{public$con;public$lockMode=false;function __construct($a,$b,$c){$this->con=new Connector($a,$b,$c);}function SELECT($d,$e=array(),$f=array(),$g=null,$h=false){if((is_int($g)||is_string($g)||isset($g[0]))&&!$h){$h=$g;$g=null;}$i=Parser::SELECT($d,$e,$f,$g,$h);return$this->con->_query($i[0],$i[1],$i[2],$i[3],$this->lockMode ? 0 : 1);}function INSERT($d,$j){$i=Parser::INSERT($d,$j);return$this->con->_query($i[0],$i[1],$i[2]);}function UPDATE($d,$j,$f=array()){$i=Parser::UPDATE($d,$j,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function DELETE($d,$f=array()){$i=Parser::DELETE($d,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function query($k,$l=null,$m=null,$n=0){return$this->con->query($k,$l,$m,$n);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($o){$this->con->db->beginTransaction();$p=$o($this);if($p===false)$this->con->db->rollBack();else$this->con->db->commit();return$p;}function modeLock($q){$this->lockMode=$q;}}
?>