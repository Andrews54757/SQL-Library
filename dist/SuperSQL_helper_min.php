<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.1.5
 Built on: 17/09/2017
*/

namespace SuperSQL;

class SQLHelper{public$s;public$connections; __construct($b,$c=null,$d=null,$e=null,$f=array()){$this->connections=array();if(is_array($b)){if(is_array($b[0])){foreach($b as$g=>$h){$i=isset($h['host'])?$h['host']:'';$c=isset($h['db'])?$h['db']:'';$d=isset($h['user'])?$h['user']:'';$e=isset($h['password'])?$h['password']:'';$j=isset($h['options'])?$h['options']:array();$k=self::connect($i,$c,$d,$e,$j);array_push($this->connections,$k);}}else{foreach($b as$g=>$h){array_push($this->connections,$h);}}$this->s=$this->connections[0];}else if(is_string($b)){$this->s=self::connect($b,$c,$d,$e,$f);array_push($this->connections,$this->s);}else{array_push($this->connections,$b);$this->s=$b;}}static  connect($b,$c,$d,$e,$f=array()){$g='mysql';$h=false;if(is_string($f)){if(strpos($f,':')!==false){$h=$f;}else{$g=strtolower($f);}}else if(isset($f['dbtype']))$g=strtolower($f['dbtype']);if(!$h){$i='';switch($g){case 'pgsql':$i='pgsql';$j=array('dbname'=>$c,'host'=>$b);if(isset($f['port']))$j['port']=$f['port'];break;case 'sybase':$i='dblib';$j=array('dbname'=>$c,'host'=>$b);if(isset($f['port']))$j['port']=$f['port'];break;case 'oracle':$i='oci';$j=array('dbname'=>isset($b)?'//'.$b.':'.(isset($f['port'])?$f['port']:'1521').'/'.$c:$c);break;default:$i='mysql';$j=array('dbname'=>$c);if(isset($f['socket']))$j['unix_socket']=$f['socket'];else{$j['host']=$b;if(isset($f['port']))$j['port']=$f['port'];}break;}$h=$i.':';if(isset($f['charset'])){$j['charset']=$f['charset'];}$h=$i.':';$k=0;foreach($j as$l=>$m){if($k!=0){$h.=';';}$h.=$l.'='.$m;$k++;}}return new SuperSQL($h,$d,$e);}private static  escape($b){$c=strtolower(gettype($b));if($c=='boolean'){$b=$b?'1':'0';}else if($c=='string'){$b='\''.$b.'\'';}else if($c=='double'||$c=='integer'){$b=(int)$b;}else if($c=='null'){$b='0';}return$b;} change($b){$this->s=$this->connections[$b];return$this->s;} getCon($b=false){if($b){return$this->connections;}else{return$this->s;}} get($b,$c=array(),$d=array(),$e=null){$f=$this->s->SELECT($b,$c,$d,$e,1)->getData();return($f&&$f[0])?$f[0]:false;} create($b,$c){$d='CREATE TABLE `'.$b.'` (';$e=0;foreach($c as$f=>$g){if($e!=0){$d.=', ';}$d.='`'.$f.'` '.$g;$e++;}$d.=')';return$this->s->query($d);} drop($b){return$this->s->query('DROP TABLE `'.$b.'`');} replace($b,$c,$d=array()){$e=array();foreach($c as$f=>$g){$h='`'.Parser::rmComments($f).'`';foreach($g as$i=>$j){$h='REPLACE('.$h.', '.self::escape($i).', '.self::escape($j).')';}$e['#'.$f]=$h;}return$this->s->UPDATE($b,$e,$d);} select($b,$c=array(),$d=array(),$e=null,$f=false){return$this->s->SELECT($b,$c,$d,$e,$f);} insert($b,$c){return$this->s->INSERT($b,$c);} update($b,$c,$d=array()){return$this->s->UPDATE($b,$c,$d);} delete($b,$c=array()){return$this->s->DELETE($b,$c);} sqBase($b,$c,$d){$e=0;$f=array();if($d){Parser::JOIN($d,$b,$f,$e);}if(count($c)!=0){$b.=' WHERE ';$b.=Parser::conditions($c,$f);}$g=$this->_query($b,$f);return$g[0]->fetchColumn();} count($b,$c=array(),$d=array()){return$this->sqBase('SELECT COUNT(*) FROM `'.$b.'`',$c,$d);} avg(){return$this->sqBase('SELECT AVG(`'.$column.'`) FROM `'.$table.'`',$b,$c);} max($b,$c,$d=array(),$e=array()){return$this->sqBase('SELECT MAX(`'.$c.'`) FROM `'.$b.'`',$d,$e);} min($b,$c,$d=array(),$e=array()){return$this->sqBase('SELECT MIN(`'.$c.'`) FROM `'.$b.'`',$d,$e);} sum($b,$c,$d=array(),$e=array()){return$this->sqBase('SELECT SUM(`'.$c.'`) FROM `'.$b.'`',$d,$e);} _query($b,$c){$d=$this->s->con->db->prepare($b);foreach($c as$e=>&$f){$d->bindParam($e+1,$f[0],$f[1]);}$g=$d->execute();return array($d,$g);} query($b,$c=null){return$this->s->con->query($b,$c);} transact($b){return$this->s->transact($b);} selectMap($b,$c,$d=array(),$e=null,$f=false){$g=array();$h=array(); recurse($b,&$c,&$d,&$e){foreach($b as$f=>$g){if(is_int($f)){array_push($d,$g);$h=Parser::getType($g);if($h){$i=Parser::getType($g);if($i&&($i==='int'||$i==='bool'||$i==='string'||$i==='json'||$i==='object'||$i==='double')){$h=false;}}if($h){array_push($c,$h);}else{preg_match('/(?:[^\.]*\.)?(.*)/',$g,$j);array_push($c,$j[1]);}}else{$c[$f]=array();recurse($g,$c[$f],$d,$e);}}}recurse($k,$e,$d,$e);$l=$this->s->select($m,$d,$n,$o,$p);$q=$l->getData(); recurse2($b,$c,&$d){$d=array();foreach($b as$e=>$f){if(is_int($e)){$d[$f]=$c[$f];}else{recurse2($f,$c,$d[$e]);}}}$r->result=array();foreach($d as$g=>$c){recurse2($h,$c,$r->result[$g]);}return$r;}}
?>