<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.1.5
 Built on: 17/09/2017
*/

namespace SuperSQL;

// lib/connector.php
class Response implements \ArrayAccess,\Iterator{public$result;public$affected;public$ind=0;public$error;public$errorData;public$outTypes;public$complete=true;function __construct($b,$c,&$d,$e){$this->error=!$c;if(!$c){$this->errorData=$b->errorInfo();}else{$this->outTypes=$d;if($e===0){$f=$b->fetchAll(\PDO::FETCH_ASSOC);if($d){foreach($f as$g=>&$h){$this->map($h,$d);}}$this->result=$f;}else if($e===1){$this->stmt=$b;$this->complete=false;$this->result=array();}$this->affected=$b->rowCount();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$b=$this->stmt->fetch(\PDO::FETCH_ASSOC);if($b){if($this->outTypes){$this->map($b,$this->outTypes);}array_push($this->result,$b);return$b;}else{$this->close();return false;}}private function fetchAll(){while($this->fetchNextRow()){}}function map(&$b,&$c){foreach($c as$d=>$e){if(isset($b[$d])){switch($e){case 'int':$b[$d]=(int)$b[$d];break;case 'double':$b[$d]=(double)$b[$d];break;case 'string':$b[$d]=(string)$b[$d];break;case 'bool':$b[$d]=$b[$d]?true:false;break;case 'json':$b[$d]=json_decode($b[$d]);break;case 'object':$b[$d]=unserialize($b[$d]);break;}}}}function error(){return$this->error?$this->errorData:false;}function getData($b=false){if(!$this->complete&&!$b)$this->fetchAll();return$this->result;}function getAffected(){return$this->affected;}function countRows(){return count($this->result);}function offsetSet($b,$c){}function offsetExists($b){return$this->offsetGet($b)===null?false:true;}function offsetUnset($b){}function offsetGet($b){if(is_int($b)){if(isset($this->result[$b])){return$this->result[$b];}else if(!$this->complete){while($this->fetchNextRow()){if(isset($this->result[$b]))return$this->result[$b];}}}return null;}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$b=$this->fetchNextRow();$this->ind++;return$b;}else{return false;}}function rewind(){$this->ind=0;}function current(){return$this->result[$this->ind];}function key(){return$this->ind;}function valid(){return$this->offsetExists($this->ind);}}class Connector{public$db;public$log=array();public$dev=false;function __construct($b,$c,$d){try{$this->db=new \PDO($b,$c,$d);}catch(\PDOException$e){throw new \Exception($e->getMessage());}}function query($b,$c=null,$d=null,$e=0){$f=$this->db->prepare($b);if($c)$g=$f->execute($c);else$g=$f->execute();if($this->dev)array_push($this->log,array($b,$c));if($e!==3){return new Response($f,$g,$d,$e);}else{return$f;}}function _query(&$b,$c,&$d,&$e=null,$f=0){$g=$this->db->prepare($b);if($this->dev)array_push($this->log,array($b,$c,$d));foreach($c as$h=>&$i){$g->bindParam($h+1,$i[0],$i[1]);}$j=$g->execute();if(!isset($d[0])){return new Response($g,$j,$e,$f);}else{$k=array();array_push($k,new Response($g,$j,$e,0));foreach($d as$h=>$l){foreach($l as$m=>&$n){$c[$m][0]=$n;}$j=$g->execute();array_push($k,new Response($g,$j,$e,0));}return$k;}}function close(){$this->db=null;}}
// lib/parser.php
class Parser{static function getArg(&$b){preg_match('/^(?:\[(.{2})\])(.*)/',$b,$c);if(isset($c[1])){$b=$c[2];return$c[1];}return false;}static function isRaw(&$b){if($b[0]==='#'){$b=substr($b,1);return true;}return false;}static function isSpecial($b){return$b==='json'||$b==='object';}static function append(&$b,$c,$d,$e){if(is_array($c)&&$e[$d][2]<5){$f=count($c);for($g=1;$g<$f;$g++){if(!isset($b[$g-1]))$b[$g-1]=array();$b[$g-1][$d]=$c[$g];}}}static function stripArgs(&$b){preg_match('/(?:\[.{2}\]){0,3}([^\[]*)/',$b,$c);return$c[1];}static function append2(&$b,$c,$d,&$e,$f=false){$g=count($d);if($f){self::recurse($e,$d[0],$c,'',$e,0);}for($h=1;$h<$g;$h++){if(!isset($b[$h-1]))$b[$h-1]=array();self::recurse($b[$h-1],$d[$h],$c,'',$e,1);}}private static function recurse(&$b,$c,$d,$e,$f,$g){foreach($c as$h=>$i){$h=self::stripArgs($h);$j=$h.'#'.$e;if(isset($d[$j]))$k=$d[$j];else$k=$d[$h];if(is_array($i)&&!self::isSpecial($f[$k][2])){if(isset($i[0])){foreach($i as$l=>$m){$l+=$k;if($g&&isset($b[$l]))trigger_error('Key collision: '.$h,E_USER_WARNING);$b[$l]=self::value($f[$l][2],$m);if($g)$b[$l]=$b[$l][0];}}else{self::recurse($b,$i,$d,$e.'/'.$h,$f,$g);}}else{if($g&&isset($b[$k]))trigger_error('Key collision: '.$h,E_USER_WARNING);$b[$k]=self::value($f[$k][2],$i);if($g)$b[$k]=$b[$k][0];}}}static function quote($b){preg_match('/([a-zA-Z0-9_]*)\.?([a-zA-Z0-9_]*)?/',$b,$c);if($c[2]!==''){return '`'.$c[1].'`.`'.$c[2].'`';}else{return '`'.$c[1].'`';}}static function quoteArray(&$b){foreach($b as&$c){$c=self::quote($c);}}static function table($b){if(is_array($b)){$c='';foreach($b as$d=>$e){$f=self::getType($e);if($d!==0)$c.=', ';$c.='`'.$e.'`';if($g)$c.=' AS `'.$f.'`';}return$c;}else{return '`'.$b.'`';}}static function value($b,$c){if(!$b)$b=gettype($c);$d=\PDO::PARAM_STR;if($b==='integer'||$b==='int'){$d=\PDO::PARAM_INT;$c=(int)$c;}else if($b==='string'||$b==='str'||$b==='double'){$c=(string)$c;}else if($b==='boolean'||$b==='bool'){$d=\PDO::PARAM_BOOL;$c=$c?'1':'0';}else if($b==='null'||$b==='NULL'){$d=\PDO::PARAM_NULL;$c=null;}else if($b==='resource'||$b==='lob'){$d=\PDO::PARAM_LOB;}else if($b==='json'){$c=json_encode($c);}else if($b==='object'){$c=serialize($c);}else{trigger_error('Invalid type '.$b,E_USER_WARNING);}return array($c,$d,$b);}static function getType(&$b){preg_match('/([^\[]*)(?:\[([^\]]*)\])?/',$b,$c);$b=$c[1];return isset($c[2])?$c[2]:false;}static function rmComments($b){preg_match('/([^#]*)/',$b,$c);return$c[1];}static function conditions($b,&$c,&$d=false,&$e=0,$f=' AND ',$g=' = ',$h=''){$i=0;$j='';foreach($b as$k=>$l){if(is_int($k))$k=$l;preg_match('/^(?<r>\#)?(?:(?:\[(?<a>.{2})\])(?:(?:\[(?<b>.{2})\])(?:\[(?<c>.{2})\])?)?)?(?<out>.*)/',$k,$m);$n=($m['r']==='#');$o=$m['a'];$k=$m['out'];$p=$f;$q=$g;$r=$n?false:self::getType($k);$s=is_array($l)&&!self::isSpecial($r);$t=$s&&!isset($l[0]);if($o&&($o==='||'||$o==='&&')){$p=($o==='||')?' OR ':' AND ';$o=$m['b'];if($s&&$o&&($o==='||'||$o==='&&')){$f=$p;$p=($o==='||')?' OR ':' AND ';$o=$m['c'];}}$u=false;if($o&&$o!=='=='){if($o==='!='||$o==='>='||$o==='<='){$q=' '.$o.' ';}else if($o==='>>'){$q=' > ';}else if($o==='<<'){$q=' < ';}else if($o==='~~'){$q=' LIKE ';}else if($o==='!~'){$q=' NOT LIKE ';}else if($o==='><'||$o==='<>'){$u=true;}else{throw new \Exception('Invalid operator '.$o.' Available: ==,!=,>>,<<,>=,<=,~~,!~,<>,><');}}else if($t||$o==='==')$q=' = ';if(!$s)$f=$p;if($i!==0)$j.=$f;$v=self::rmComments($k);if(!$n)$v=self::quote($v);if($s){$j.='(';if($t){$j.=self::conditions($l,$c,$d,$e,$p,$q,$h.'/'.$k);}else{if($d!==false&&!$n){$d[$k]=$e;$d[$k.'#'.$h]=$e++;}if($u){$e+=2;$j.=$v.($o==='<>'?'NOT':'').' BETWEEN ';if($n){$j.=$l[0].' AND '.$l[1];}else{$j.='? AND ?';array_push($c,self::value($r,$l[0]));array_push($c,self::value($r,$l[1]));}}else{$m=isset($l[1]);$w=$m?count($l):$l[0];for($x=0;$x<$w;$x++){$y=$m?$l[$x]:'';if($x!==0)$j.=$p;++$e;$j.=$v.$q;if($n){$j.=$y;}else{$j.='?';array_push($c,self::value($r,$y));}}}}$j.=')';}else{$j.=$v.$q;if($n){$j.=$l;}else{$j.='?';array_push($c,self::value($r,$l));if($d!==false){$d[$k]=$e;$d[$k.'#'.$h]=$e++;}}}++$i;}return$j;}static function JOIN($b,&$c,&$d,&$e){foreach($b as$f=>&$g){$h=self::isRaw($f);$i=self::getArg($f);switch($i){case '<<':$c.=' RIGHT';break;case '>>':$c.=' LEFT';break;case '<>':$c.=' FULL';break;case '>~':$c.=' LEFT OUTER';break;}$c.=' JOIN `'.$f.'` ON ';if($h){$c.=$g;}else{$c.=self::conditions($g,$d,$j,$e);}}}static function WHERE(&$b,$c,&$d,&$e,$f=0){$b.=' WHERE ';if(isset($c[0])){$g=array();$b.=self::conditions($c[0],$d,$g,$f);$h=isset($c[1][0]);self::append2($e,$g,$h?$c[1]:$c,$d,$h);}else{$b.=self::conditions($c,$d);}}static function columns($b,&$c,&$d){$e='';$f=$b[0][0];if($f==='D'||$f==='I'){if($b[0]==='DISTINCT'){$c.='DISTINCT ';array_splice($b,0,1);}else if(substr($b[0],0,11)==='INSERT INTO'){$c=$b[0].' '.$c;array_splice($b,0,1);}else if(substr($b[0],0,4)==='INTO'){$e=' '.$b[0].' ';array_splice($b,0,1);}}if(isset($b[0])){if($b[0]==='*'){array_splice($b,0,1);$c.='*';foreach($b as$g=>$h){$i=self::getType($h);$d[$h]=$i;}}else{foreach($b as$g=>$h){$j=self::getType($h);$k=false;if($j){$k=$j;$l=self::getType($h);if($l){$i=$l;}else{if($k==='json'||$k==='object'||$k==='int'||$k==='string'||$k==='bool'||$k==='double'){$i=$k;$k=false;}else$i=false;}if($i){if(!$d)$d=array();$d[$k?$k:$h]=$i;}}if($g!==0){$c.=', ';}$c.=self::quote($h);if($k)$c.=' AS `'.$k.'`';}}}else$c.='*';$c.=$e;}static function SELECT($b,$c,$d,$e,$f){$g='SELECT ';$h=$i=array();$j=null;$k=0;if(!isset($c[0])){$g.='*';}else{self::columns($c,$g,$j);}$g.=' FROM '.self::table($b);if($e){self::JOIN($e,$g,$h,$k);}if(!empty($d)){self::WHERE($g,$d,$h,$i,$k);}if($f){if(is_int($f)){$g.=' LIMIT '.$f;}else if(is_string($f)){$g.=' '.$f;}else if(is_array($f)){if(isset($f[0])){$g.=' LIMIT '.(int)$f[0].' OFFSET '.(int)$f[1];}else{if(isset($f['GROUP'])){$g.=' GROUP BY ';if(is_string($f['GROUP'])){$g.=self::quote($f['GROUP']);}else{self::quoteArray($f['GROUP']);$g.=implode(', ',$f['GROUP']);}if(isset($f['HAVING'])){$g.=' HAVING '.(is_string($f['HAVING'])?$f['HAVING']:self::conditions($f['HAVING'],$h,$l,$k));}}if(isset($f['ORDER'])){$g.=' ORDER BY '.self::quote($f['ORDER']);}if(isset($f['LIMIT'])){$g.=' LIMIT '.(int)$f['LIMIT'];}if(isset($f['OFFSET'])){$g.=' OFFSET '.(int)$f['OFFSET'];}}}}return array($g,$h,$i,$j);}static function INSERT($b,$c,$d){$e='INSERT INTO '.self::table($b).' (';$f=$g=$h=array();$i='';$j=0;$k=isset($c[0]);$l=$k?$c[0]:$c;foreach($l as$m=>$n){$o=self::isRaw($m);if($j){$e.=', ';$i.=', ';}else$j=1;if(!$o)$p=self::getType($m);$e.='`'.$m.'`';if($o){$i.=$n;}else{$i.='?';$q=!$k&&(!$p||!self::isSpecial($p))&&is_array($n);array_push($f,self::value($p,$q?$n[0]:$n));if($k){$h[$m]=array($n,$p);}else if($q){self::append($g,$n,$j++,$f);}}}$e.=') VALUES ('.$i.')';if($k){unset($c[0]);foreach($c as$r){$e.=', ('.$i.')';foreach($h as$m=>$n){array_push($f,self::value($n[1],isset($r[$m])?$r[$m]:$n[0]));}}}if($d)$e.=' '.$d;return array($e,$f,$g);}static function UPDATE($b,$c,$d){$e='UPDATE '.self::table($b).' SET ';$f=$g=$h=array();$i=$j=0;$k=isset($c[0]);$l=$k?$c[0]:$c;foreach($l as$m=>&$n){$o=self::isRaw($m);if($j){$e.=', ';}else$j=1;if($o){$e.='`'.$m.'` = '.$n;}else{$p=self::getArg($m);$q=self::getType($m);$e.='`'.$m.'` = ';if($p){$e.='`'.$m.'` ';switch($p){case '+=':$e.='+ ?';break;case '-=':$e.='- ?';break;case '/=':$e.='/ ?';break;case '*=':$e.='* ?';break;}}else$e.='?';$r=(!$q||!self::isSpecial($q))&&is_array($n);array_push($f,self::value($q,$r?$n[0]:$n));if($k){$h[$m]=$i++;}else if($r){self::append($g,$n,$i++,$f);}}}if($k)self::append2($g,$h,$c,$f);if(!empty($d)){self::WHERE($e,$d,$f,$g,$i);}return array($e,$f,$g);}static function DELETE($b,$c){$d='DELETE FROM '.self::table($b);$e=$f=array();if(!empty($c)){self::WHERE($d,$c,$e,$f);}return array($d,$e,$f);}}
// index.php
class SuperSQL{public$con;public$lockMode=false;function __construct($b,$c,$d){$this->con=new Connector($b,$c,$d);}function SELECT($b,$c=array(),$d=array(),$e=null,$f=false){if((is_int($e)||is_string($e)||isset($e[0]))&&!$f){$f=$e;$e=null;}$g=Parser::SELECT($b,$c,$d,$e,$f);return$this->con->_query($g[0],$g[1],$g[2],$g[3],$this->lockMode?0:1);}function INSERT($b,$c,$d=null){$e=Parser::INSERT($b,$c,$d);return$this->con->_query($e[0],$e[1],$e[2]);}function UPDATE($b,$c,$d=array()){$e=Parser::UPDATE($b,$c,$d);return$this->con->_query($e[0],$e[1],$e[2]);}function DELETE($b,$c=array()){$d=Parser::DELETE($b,$c);return$this->con->_query($d[0],$d[1],$d[2]);}function query($b,$c=null,$d=null,$e=0){return$this->con->query($b,$c,$d,$e);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($b){$this->con->db->beginTransaction();$c=$b($this);if($c===false)$this->con->db->rollBack();else$this->con->db->commit();return$c;}function modeLock($b){$this->lockMode=$b;}}
?>