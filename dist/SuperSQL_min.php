<?php
/*
 Author: Andrews54757
 License: MIT (https://github.com/ThreeLetters/SuperSQL/blob/master/LICENSE)
 Source: https://github.com/ThreeLetters/SQL-Library
 Build: v1.1.5
 Built on: 17/09/2017
*/

namespace SuperSQL;

// lib/connector.php
class Response implements \ArrayAccess,\Iterator{public$result;public$affected;public$ind=0;public$error;public$errorData;public$outTypes;public$complete=true;function __construct($a,$b,&$c,$d){$this->error=!$b;if(!$b){$this->errorData=$a->errorInfo();}else{$this->outTypes=$c;if($d===0){$e=$a->fetchAll(\PDO::FETCH_ASSOC);if($c){foreach($e as$f=>&$g){$this->map($g,$c);}}$this->result=$e;}else if($d===1){$this->stmt=$a;$this->complete=false;$this->result=array();}$this->affected=$a->rowCount();}}function close(){$this->complete=true;if($this->stmt){$this->stmt->closeCursor();$this->stmt=null;}}private function fetchNextRow(){$g=$this->stmt->fetch(\PDO::FETCH_ASSOC);if($g){if($this->outTypes){$this->map($g,$this->outTypes);}array_push($this->result,$g);return$g;}else{$this->close();return false;}}private function fetchAll(){while($this->fetchNextRow()){}}function map(&$g,&$c){foreach($c as$h=>$i){if(isset($g[$h])){switch($i){case 'int':$g[$h]=(int)$g[$h];break;case 'double':$g[$h]=(double)$g[$h];break;case 'string':$g[$h]=(string)$g[$h];break;case 'bool':$g[$h]=$g[$h]?true:false;break;case 'json':$g[$h]=json_decode($g[$h]);break;case 'object':$g[$h]=unserialize($g[$h]);break;}}}}function error(){return$this->error?$this->errorData:false;}function getData($j=false){if(!$this->complete&&!$j)$this->fetchAll();return$this->result;}function getAffected(){return$this->affected;}function countRows(){return count($this->result);}function offsetSet($k,$l){}function offsetExists($k){return$this->offsetGet($k)===null?false:true;}function offsetUnset($k){}function offsetGet($k){if(is_int($k)){if(isset($this->result[$k])){return$this->result[$k];}else if(!$this->complete){while($this->fetchNextRow()){if(isset($this->result[$k]))return$this->result[$k];}}}return null;}function next(){if(isset($this->result[$this->ind])){return$this->result[$this->ind++];}else if(!$this->complete){$g=$this->fetchNextRow();$this->ind++;return$g;}else{return false;}}function rewind(){$this->ind=0;}function current(){return$this->result[$this->ind];}function key(){return$this->ind;}function valid(){return$this->offsetExists($this->ind);}}class Connector{public$db;public$log=array();public$dev=false;function __construct($m,$n,$o){try{$this->db=new \PDO($m,$n,$o);}catch(\PDOException$p){throw new \Exception($p->getMessage());}}function query($q,$r=null,$c=null,$d=0){$s=$this->db->prepare($q);if($r)$p=$s->execute($r);else$p=$s->execute();if($this->dev)array_push($this->log,array($q,$r));if($d!==3){return new Response($s,$p,$c,$d);}else{return$s;}}function _query(&$t,$u,&$v,&$c=null,$d=0){$s=$this->db->prepare($t);if($this->dev)array_push($this->log,array($t,$u,$v));foreach($u as$w=>&$x){$s->bindParam($w+1,$x[0],$x[1]);}$p=$s->execute();if(!isset($v[0])){return new Response($s,$p,$c,$d);}else{$y=array();array_push($y,new Response($s,$p,$c,0));foreach($v as$w=>$l){foreach($l as$z=>&$aa){$u[$z][0]=$aa;}$p=$s->execute();array_push($y,new Response($s,$p,$c,0));}return$y;}}function close(){$this->db=null;}}
// lib/parser.php
class Parser{static function getArg(&$a){preg_match('/^(?:\[(.{2})\])(.*)/',$a,$b);if(isset($b[1])){$a=$b[2];return$b[1];}return false;}static function isRaw(&$c){if($c[0]==='#'){$c=substr($c,1);return true;}return false;}static function isSpecial($d){return$d==='json'||$d==='object';}static function append(&$e,$f,$g,$h){if(is_array($f)&&$h[$g][2]<5){$i=count($f);for($j=1;$j<$i;$j++){if(!isset($e[$j-1]))$e[$j-1]=array();$e[$j-1][$g]=$f[$j];}}}static function stripArgs(&$c){preg_match('/(?:\[.{2}\]){0,3}([^\[]*)/',$c,$b);return$b[1];}static function append2(&$k,$l,$m,&$h,$b=false){$i=count($m);if($b){self::recurse($h,$m[0],$l,'',$h,0);}for($c=1;$c<$i;$c++){if(!isset($k[$c-1]))$k[$c-1]=array();self::recurse($k[$c-1],$m[$c],$l,'',$h,1);}}private static function recurse(&$n,$f,$l,$o,$h,$b){foreach($f as$j=>$p){$j=self::stripArgs($j);$q=$j.'#'.$o;if(isset($l[$q]))$r=$l[$q];else$r=$l[$j];if(is_array($p)&&!self::isSpecial($h[$r][2])){if(isset($p[0])){foreach($p as$s=>$t){$s=$r+$s;if($b&&isset($n[$a]))trigger_error('Key collision: '.$j,E_USER_WARNING);$n[$s]=self::value($h[$s][2],$t);if($b)$n[$s]=$n[$s][0];}}else{self::recurse($n,$p,$l,$o.'/'.$j,$h,$b);}}else{if($b&&isset($n[$r]))trigger_error('Key collision: '.$j,E_USER_WARNING);$n[$r]=self::value($h[$r][2],$p);if($b)$n[$r]=$n[$r][0];}}}static function quote($a){preg_match('/([a-zA-Z0-9_]*)\.?([a-zA-Z0-9_]*)?/',$a,$b);if($b[2]!==''){return '`'.$b[1].'`.`'.$b[2].'`';}else{return '`'.$b[1].'`';}}static function quoteArray(&$u){foreach($u as&$p){$p=self::quote($p);}}static function table($v){if(is_array($v)){$w='';foreach($v as$s=>$f){$x=self::getType($f);if($s!==0)$w.=', ';$w.='`'.$f.'`';if($y)$w.=' AS `'.$x.'`';}return$w;}else{return '`'.$v.'`';}}static function value($d,$z){if(!$d)$d=gettype($z);$aa=\PDO::PARAM_STR;if($d==='integer'||$d==='int'){$aa=\PDO::PARAM_INT;$z=(int)$z;}else if($d==='string'||$d==='str'||$d==='double'){$z=(string)$z;}else if($d==='boolean'||$d==='bool'){$aa=\PDO::PARAM_BOOL;$z=$z?'1':'0';}else if($d==='null'||$d==='NULL'){$aa=\PDO::PARAM_NULL;$z=null;}else if($d==='resource'||$d==='lob'){$aa=\PDO::PARAM_LOB;}else if($d==='json'){$z=json_encode($z);}else if($d==='object'){$z=serialize($z);}else{trigger_error('Invalid type '.$d,E_USER_WARNING);}return array($z,$aa,$d);}static function getType(&$a){preg_match('/([^\[]*)(?:\[([^\]]*)\])?/',$a,$b);$a=$b[1];return isset($b[2])?$b[2]:false;}static function rmComments($a){preg_match('/([^#]*)/',$a,$b);return$b[1];}static function conditions($m,&$h,&$ba=false,&$g=0,$ca=' AND ',$da=' = ',$ea=''){$fa=0;$w='';foreach($m as$c=>$f){if(is_int($c))$c=$f;preg_match('/^(?<r>\#)?(?:(?:\[(?<a>.{2})\])(?:(?:\[(?<b>.{2})\])(?:\[(?<c>.{2})\])?)?)?(?<out>.*)/',$c,$b);$ga=($b['r']==='#');$ha=$b['a'];$c=$b['out'];$ia=$ca;$ja=$da;$d=$ga?false:self::getType($c);$u=is_array($f)&&!self::isSpecial($d);$ka=$u&&!isset($f[0]);if($ha&&($ha==='||'||$ha==='&&')){$ia=($ha==='||')?' OR ':' AND ';$ha=$b['b'];if($u&&$ha&&($ha==='||'||$ha==='&&')){$ca=$ia;$ia=($ha==='||')?' OR ':' AND ';$ha=$b['c'];}}$la=false;if($ha&&$ha!=='=='){if($ha==='!='||$ha==='>='||$ha==='<='){$ja=' '.$ha.' ';}else if($ha==='>>'){$ja=' > ';}else if($ha==='<<'){$ja=' < ';}else if($ha==='~~'){$ja=' LIKE ';}else if($ha==='!~'){$ja=' NOT LIKE ';}else if($ha==='><'||$ha==='<>'){$la=true;}else{throw new \Exception('Invalid operator '.$ha.' Available: ==,!=,>>,<<,>=,<=,~~,!~,<>,><');}}else if($ka||$ha==='==')$ja=' = ';if(!$u)$ca=$ia;if($fa!==0)$w.=$ca;$ma=self::rmComments($c);if(!$ga)$ma=self::quote($ma);if($u){$w.='(';if($ka){$w.=self::conditions($f,$h,$ba,$g,$ia,$ja,$ea.'/'.$c);}else{if($ba!==false&&!$ga){$ba[$c]=$g;$ba[$c.'#'.$ea]=$g++;}if($la){$g+=2;$w.=$ma.($ha==='<>'?'NOT':'').' BETWEEN ';if($ga){$w.=$f[0].' AND '.$f[1];}else{$w.='? AND ?';array_push($h,self::value($d,$f[0]));array_push($h,self::value($d,$f[1]));}}else{$b=isset($f[1]);$i=$b?count($f):$f[0];for($j=0;$j<$i;$j++){$p=$b?$f[$j]:'';if($j!==0)$w.=$ia;++$g;$w.=$ma.$ja;if($ga){$w.=$p;}else{$w.='?';array_push($h,self::value($d,$p));}}}}$w.=')';}else{$w.=$ma.$ja;if($ga){$w.=$f;}else{$w.='?';array_push($h,self::value($d,$f));if($ba!==false){$ba[$c]=$g;$ba[$c.'#'.$ea]=$g++;}}}++$fa;}return$w;}static function JOIN($ca,&$w,&$h,&$s){foreach($ca as$c=>&$f){$ga=self::isRaw($c);$ha=self::getArg($c);switch($ha){case '<<':$w.=' RIGHT';break;case '>>':$w.=' LEFT';break;case '<>':$w.=' FULL';break;case '>~':$w.=' LEFT OUTER';break;}$w.=' JOIN `'.$c.'` ON ';if($ga){$w.=$f;}else{$w.=self::conditions($f,$h,$na,$s);}}}static function WHERE(&$w,$oa,&$h,&$k,$s=0){$w.=' WHERE ';if(isset($oa[0])){$g=array();$w.=self::conditions($oa[0],$h,$g,$s);$b=isset($oa[1][0]);self::append2($k,$g,$b?$oa[1]:$oa,$h,$b);}else{$w.=self::conditions($oa,$h);}}static function columns($pa,&$w,&$qa){$ra='';$na=$pa[0][0];if($na==='D'||$na==='I'){if($pa[0]==='DISTINCT'){$w.='DISTINCT ';array_splice($pa,0,1);}else if(substr($pa[0],0,11)==='INSERT INTO'){$w=$pa[0].' '.$w;array_splice($pa,0,1);}else if(substr($pa[0],0,4)==='INTO'){$ra=' '.$pa[0].' ';array_splice($pa,0,1);}}if(isset($pa[0])){if($pa[0]==='*'){array_splice($pa,0,1);$w.='*';foreach($pa as$s=>$f){$d=self::getType($f);$qa[$f]=$d;}}else{foreach($pa as$s=>$f){$sa=self::getType($f);$x=false;if($sa){$x=$sa;$ta=self::getType($f);if($ta){$d=$ta;}else{if($x==='json'||$x==='object'||$x==='int'||$x==='string'||$x==='bool'||$x==='double'){$d=$x;$x=false;}else$d=false;}if($d){if(!$qa)$qa=array();$qa[$x?$x:$f]=$d;}}if($s!==0){$w.=', ';}$w.=self::quote($f);if($x)$w.=' AS `'.$x.'`';}}}else$w.='*';$w.=$ra;}static function SELECT($v,$pa,$oa,$ca,$ua){$w='SELECT ';$h=$k=array();$qa=null;$s=0;if(!isset($pa[0])){$w.='*';}else{self::columns($pa,$w,$qa);}$w.=' FROM '.self::table($v);if($ca){self::JOIN($ca,$w,$h,$s);}if(!empty($oa)){self::WHERE($w,$oa,$h,$k,$s);}if($ua){if(is_int($ua)){$w.=' LIMIT '.$ua;}else if(is_string($ua)){$w.=' '.$ua;}else if(is_array($ua)){if(isset($ua[0])){$w.=' LIMIT '.(int)$ua[0].' OFFSET '.(int)$ua[1];}else{if(isset($ua['GROUP'])){$w.=' GROUP BY ';if(is_string($ua['GROUP'])){$w.=self::quote($ua['GROUP']);}else{self::quoteArray($ua['GROUP']);$w.=implode(', ',$ua['GROUP']);}if(isset($ua['HAVING'])){$w.=' HAVING '.(is_string($ua['HAVING'])?$ua['HAVING']:self::conditions($ua['HAVING'],$h,$na,$s));}}if(isset($ua['ORDER'])){$w.=' ORDER BY '.self::quote($ua['ORDER']);}if(isset($ua['LIMIT'])){$w.=' LIMIT '.(int)$ua['LIMIT'];}if(isset($ua['OFFSET'])){$w.=' OFFSET '.(int)$ua['OFFSET'];}}}}return array($w,$h,$k,$qa);}static function INSERT($v,$va,$wa){$w='INSERT INTO '.self::table($v).' (';$h=$k=$g=array();$xa='';$s=0;$ya=isset($va[0]);$m=$ya?$va[0]:$va;foreach($m as$c=>$f){$ga=self::isRaw($c);if($s){$w.=', ';$xa.=', ';}else$s=1;if(!$ga)$d=self::getType($c);$w.='`'.$c.'`';if($ga){$xa.=$f;}else{$xa.='?';$b=!$ya&&(!$d||!self::isSpecial($d))&&is_array($f);array_push($h,self::value($d,$b?$f[0]:$f));if($ya){$g[$c]=array($f,$d);}else if($b){self::append($k,$f,$s++,$h);}}}$w.=') VALUES ('.$xa.')';if($ya){unset($va[0]);foreach($va as$p){$w.=', ('.$xa.')';foreach($g as$c=>$f){array_push($h,self::value($f[1],isset($p[$c])?$p[$c]:$f[0]));}}}if($wa)$w.=' '.$wa;return array($w,$h,$k);}static function UPDATE($v,$va,$oa){$w='UPDATE '.self::table($v).' SET ';$h=$k=$l=array();$s=$t=0;$ya=isset($va[0]);$m=$ya?$va[0]:$va;foreach($m as$c=>&$f){$ga=self::isRaw($c);if($t){$w.=', ';}else$t=1;if($ga){$w.='`'.$c.'` = '.$f;}else{$ha=self::getArg($c);$d=self::getType($c);$w.='`'.$c.'` = ';if($ha){$w.='`'.$c.'` ';switch($ha){case '+=':$w.='+ ?';break;case '-=':$w.='- ?';break;case '/=':$w.='/ ?';break;case '*=':$w.='* ?';break;}}else$w.='?';$b=(!$d||!self::isSpecial($d))&&is_array($f);array_push($h,self::value($d,$b?$f[0]:$f));if($ya){$l[$c]=$s++;}else if($b){self::append($k,$f,$s++,$h);}}}if($ya)self::append2($k,$l,$va,$h);if(!empty($oa)){self::WHERE($w,$oa,$h,$k,$s);}return array($w,$h,$k);}static function DELETE($v,$oa){$w='DELETE FROM '.self::table($v);$h=$k=array();if(!empty($oa)){self::WHERE($w,$oa,$h,$k);}return array($w,$h,$k);}}
// index.php
class SuperSQL{public$con;public$lockMode=false;function __construct($a,$b,$c){$this->con=new Connector($a,$b,$c);}function SELECT($d,$e=array(),$f=array(),$g=null,$h=false){if((is_int($g)||is_string($g)||isset($g[0]))&&!$h){$h=$g;$g=null;}$i=Parser::SELECT($d,$e,$f,$g,$h);return$this->con->_query($i[0],$i[1],$i[2],$i[3],$this->lockMode?0:1);}function INSERT($d,$j,$k=null){$i=Parser::INSERT($d,$j,$k);return$this->con->_query($i[0],$i[1],$i[2]);}function UPDATE($d,$j,$f=array()){$i=Parser::UPDATE($d,$j,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function DELETE($d,$f=array()){$i=Parser::DELETE($d,$f);return$this->con->_query($i[0],$i[1],$i[2]);}function query($l,$m=null,$n=null,$o=0){return$this->con->query($l,$m,$n,$o);}function close(){$this->con->close();}function dev(){$this->con->dev=true;}function getLog(){return$this->con->log;}function transact($p){$this->con->db->beginTransaction();$q=$p($this);if($q===false)$this->con->db->rollBack();else$this->con->db->commit();return$q;}function modeLock($r){$this->lockMode=$r;}}
?>